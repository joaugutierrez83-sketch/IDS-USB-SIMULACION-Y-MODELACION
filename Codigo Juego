"""
Created on Wed Oct 22 15:37:13 2025

@author: PC-JOAU
"""

import tkinter as tk
from tkinter import ttk
import time

class GameOfLife:
    def __init__(self, root, rows=20, cols=20, cell_size=25):
        self.root = root
        self.rows = rows
        self.cols = cols
        self.cell_size = cell_size
        self.running = False

        # Colores personalizados
        self.bg_color = "#1e1e1e"          # Fondo oscuro
        self.grid_line_color = "#3a3a3a"   # L√≠neas de la cuadr√≠cula
        self.cell_alive_color = "#00ff9d"  # Verde ne√≥n para celdas vivas
        self.canvas_bg = "#121212"         # Fondo del canvas

        self.grid = [[0 for _ in range(cols)] for _ in range(rows)]

        # Canvas con fondo oscuro
        self.canvas = tk.Canvas(
            root,
            width=cols * cell_size,
            height=rows * cell_size,
            bg=self.canvas_bg,
            highlightthickness=0
        )
        self.canvas.pack(pady=10)

        # Dibujar la cuadr√≠cula con l√≠neas m√°s tenues
        for i in range(rows):
            for j in range(cols):
                x1 = j * cell_size
                y1 = i * cell_size
                x2 = x1 + cell_size
                y2 = y1 + cell_size
                self.canvas.create_rectangle(x1, y1, x2, y2, outline=self.grid_line_color)

        self.canvas.bind("<Button-1>", self.toggle_cell)

        # Estilo para los botones ttk
        style = ttk.Style()
        style.configure(
            "Custom.TButton",
            font=("Segoe UI", 11, "bold"),
            padding=6
        )

        # Frame de botones
        frame = ttk.Frame(root)
        frame.pack(pady=(0, 15))

        self.start_btn = ttk.Button(frame, text="‚ñ∂ Iniciar", style="Custom.TButton", command=self.start)
        self.start_btn.grid(row=0, column=0, padx=8)

        self.stop_btn = ttk.Button(frame, text="‚èπ Detener", style="Custom.TButton", command=self.stop)
        self.stop_btn.grid(row=0, column=1, padx=8)

        self.clear_btn = ttk.Button(frame, text="üóë Limpiar", style="Custom.TButton", command=self.clear)
        self.clear_btn.grid(row=0, column=2, padx=8)

        # Fondo de la ventana principal
        root.configure(bg=self.bg_color)

    def toggle_cell(self, event):
        if self.running:
            return
        col = event.x // self.cell_size
        row = event.y // self.cell_size
        if 0 <= row < self.rows and 0 <= col < self.cols:
            self.grid[row][col] = 1 - self.grid[row][col]
            self.draw_grid()

    def draw_grid(self):
        self.canvas.delete("cell")
        for i in range(self.rows):
            for j in range(self.cols):
                if self.grid[i][j] == 1:
                    x1 = j * self.cell_size
                    y1 = i * self.cell_size
                    x2 = x1 + self.cell_size
                    y2 = y1 + self.cell_size
                    self.canvas.create_rectangle(
                        x1, y1, x2, y2,
                        fill=self.cell_alive_color,
                        outline=self.grid_line_color,
                        tags="cell"
                    )

    def start(self):
        if not self.running:
            self.running = True
            self.run()

    def stop(self):
        self.running = False

    def clear(self):
        self.running = False
        self.grid = [[0 for _ in range(self.cols)] for _ in range(self.rows)]
        self.draw_grid()

    def run(self):
        if not self.running:
            return

        new_grid = [[0 for _ in range(self.cols)] for _ in range(self.rows)]
        for i in range(self.rows):
            for j in range(self.cols):
                alive_neighbors = self.count_neighbors(i, j)
                if self.grid[i][j] == 1:
                    if alive_neighbors <= 1 or alive_neighbors >= 4:
                        new_grid[i][j] = 0
                    elif alive_neighbors in [2, 3]:
                        new_grid[i][j] = 1
                else:
                    if alive_neighbors == 3:
                        new_grid[i][j] = 1
        self.grid = new_grid
        self.draw_grid()

        self.root.after(300, self.run)

    def count_neighbors(self, i, j):
        count = 0
        for x in [-1, 0, 1]:
            for y in [-1, 0, 1]:
                if x == 0 and y == 0:
                    continue
                ni, nj = i + x, j + y
                if 0 <= ni < self.rows and 0 <= nj < self.cols:
                    count += self.grid[ni][nj]
        return count


# --- Ejecuci√≥n principal ---
root = tk.Tk()
root.title("Aut√≥mata Celular - Juego de la Vida")
root.geometry("600x650")  # Tama√±o inicial m√°s generoso
root.resizable(True, True)

# Aplicar tema oscuro a toda la ventana
root.configure(bg="#1e1e1e")

app = GameOfLife(root, rows=25, cols=25, cell_size=20)  # Opcional: m√°s celdas m√°s peque√±as
root.mainloop()
