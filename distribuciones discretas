# -*- coding: utf-8 -*-
"""
Created on Wed Oct 22 15:39:09 2025

@author: PC-JOAU
"""

import tkinter as tk
from tkinter import ttk
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg


# === Configuración de estilo global ===
plt.style.use('dark_background')  # Fondo oscuro en las gráficas

# === Funciones para generar distribuciones ===
def generar_distribucion(nombre, params, n=1000):
    if nombre == "Uniforme":
        a = int(params["a"].get())
        b = int(params["b"].get())
        data = np.random.randint(a, b + 1, n)
        titulo = f"UNIFORME DISCRETA (a={a}, b={b})"
    
    elif nombre == "Bernoulli":
        p = float(params["p"].get())
        data = np.random.binomial(1, p, n)
        titulo = f"BERNOULLI (p={p})"
    
    elif nombre == "Binomial":
        n_ensayos = int(params["n"].get())
        p = float(params["p"].get())
        data = np.random.binomial(n_ensayos, p, n)
        titulo = f"BINOMIAL (n={n_ensayos}, p={p})"
    
    elif nombre == "Poisson":
        lam = float(params["lam"].get())
        data = np.random.poisson(lam, n)
        titulo = f"POISSON (λ={lam})"
    
    else:
        data, titulo = np.array([]), ""
    
    return data, titulo


# === Actualizar campos según la distribución seleccionada ===
def actualizar_parametros(event=None):
    for widget in frame_params.winfo_children():
        widget.destroy()

    distrib = combo.get()
    global parametros
    parametros = {}

    label_config = {"bg": "#1e1e1e", "fg": "white", "font": ("Segoe UI", 11)}
    entry_config = {"font": ("Segoe UI", 11), "width": 8}

    if distrib == "Uniforme":
        tk.Label(frame_params, text="a:", **label_config).grid(row=0, column=0, sticky="e")
        parametros["a"] = tk.Entry(frame_params, **entry_config)
        parametros["a"].insert(0, "1")
        parametros["a"].grid(row=0, column=1, padx=(5, 15))

        tk.Label(frame_params, text="b:", **label_config).grid(row=0, column=2, sticky="e")
        parametros["b"] = tk.Entry(frame_params, **entry_config)
        parametros["b"].insert(0, "6")
        parametros["b"].grid(row=0, column=3, padx=(5, 0))

    elif distrib == "Bernoulli":
        tk.Label(frame_params, text="p:", **label_config).grid(row=0, column=0, sticky="e")
        parametros["p"] = tk.Entry(frame_params, **entry_config)
        parametros["p"].insert(0, "0.6")
        parametros["p"].grid(row=0, column=1, padx=(5, 0))

    elif distrib == "Binomial":
        tk.Label(frame_params, text="n:", **label_config).grid(row=0, column=0, sticky="e")
        parametros["n"] = tk.Entry(frame_params, **entry_config)
        parametros["n"].insert(0, "10")
        parametros["n"].grid(row=0, column=1, padx=(5, 15))

        tk.Label(frame_params, text="p:", **label_config).grid(row=0, column=2, sticky="e")
        parametros["p"] = tk.Entry(frame_params, **entry_config)
        parametros["p"].insert(0, "0.5")
        parametros["p"].grid(row=0, column=3, padx=(5, 0))

    elif distrib == "Poisson":
        tk.Label(frame_params, text="λ:", **label_config).grid(row=0, column=0, sticky="e")
        parametros["lam"] = tk.Entry(frame_params, **entry_config)
        parametros["lam"].insert(0, "3")
        parametros["lam"].grid(row=0, column=1, padx=(5, 0))


# === Función para graficar ===
def graficar():
    distrib = combo.get()
    try:
        data, titulo = generar_distribucion(distrib, parametros)
    except Exception as e:
        print(f"Error en los parámetros: {e}")
        return

    if data.size == 0:
        return

    fig.clear()
    ax = fig.add_subplot(111)

    valores, conteo = np.unique(data, return_counts=True)
    ax.bar(valores, conteo, color='#00ff9d', edgecolor='white', width=0.6, alpha=0.85)
    ax.set_title(titulo, fontsize=14, fontweight='bold', color='white')
    ax.set_xlabel("Valores", color='lightgray')
    ax.set_ylabel("Frecuencia", color='lightgray')
    ax.grid(True, linestyle='--', alpha=0.4, color='gray')
    ax.set_facecolor('#121212')
    fig.patch.set_facecolor('#1e1e1e')

    canvas.draw()


# === Interfaz principal ===
ventana = tk.Tk()
ventana.title("Distribuciones Discretas")
ventana.geometry("780x620")
ventana.configure(bg="#1e1e1e")
ventana.resizable(True, True)

# Estilo para ttk
style = ttk.Style()
style.theme_use('clam')
style.configure("TCombobox", fieldbackground="#2a2a2a", background="#2a2a2a", foreground="white", font=("Segoe UI", 11))
style.map("TCombobox", fieldbackground=[('readonly', '#2a2a2a')], selectbackground=[('readonly', '#2a2a2a')])
style.configure("TFrame", background="#1e1e1e")

# Título principal
tk.Label(
    ventana,
    text="Simulador de Distribuciones Discretas",
    bg="#1e1e1e",
    fg="white",
    font=("Segoe UI", 16, "bold")
).pack(pady=(15, 10))

# ComboBox
frame_superior = tk.Frame(ventana, bg="#1e1e1e")
frame_superior.pack(pady=5)
tk.Label(frame_superior, text="Distribución:", bg="#1e1e1e", fg="white", font=("Segoe UI", 12)).pack(side="left", padx=(0, 8))
combo = ttk.Combobox(
    frame_superior,
    values=["Uniforme", "Bernoulli", "Binomial", "Poisson"],
    state="readonly",
    font=("Segoe UI", 11),
    width=15
)
combo.set("Uniforme")
combo.pack(side="left")
combo.bind("<<ComboboxSelected>>", actualizar_parametros)

# Parámetros
frame_params = tk.Frame(ventana, bg="#1e1e1e")
frame_params.pack(pady=12)
parametros = {}
actualizar_parametros()

# Botón
boton = tk.Button(
    ventana,
    text="📊 Generar y Graficar",
    command=graficar,
    bg="#0078D7",
    fg="white",
    font=("Segoe UI", 12, "bold"),
    padx=20,
    pady=6,
    relief="flat",
    activebackground="#005a9e",
    activeforeground="white",
    cursor="hand2"
)
boton.pack(pady=10)

# Figura Matplotlib
fig = plt.Figure(figsize=(6.8, 4.2), dpi=100, facecolor='#1e1e1e')
canvas = FigureCanvasTkAgg(fig, master=ventana)
canvas.get_tk_widget().pack(padx=15, pady=(0, 15))

ventana.mainloop()
